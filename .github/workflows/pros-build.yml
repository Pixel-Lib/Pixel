name: Build Template

on:
  push:
    branches: '*'
  pull_request:
    branches: '*'

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Get Month Number
        id: month-number
        run: echo "::set-output name=month::$(date +'%m')"

      - name: Cache PROS CLI
        uses: actions/cache@v2
        with:
          path: ~/.pros
          key: ${{ runner.os }}-pros-${{ steps.month-number.outputs.month }}
          restore-keys: |
            ${{ runner.os }}-pros-

      # Cache Python dependencies
      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ steps.month-number.outputs.month }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ steps.month-number.outputs.month }}-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Get short SHA
        id: short-sha
        run: |
          if [ $ACTION = opened ]; then
              # we have to get the head sha directly from the pr api, because github silly ig
              echo "then"
              sha=$(wget -O- --quiet https://api.github.com/repos/Pixel-Lib/Pixel/pulls/$PR_NUM | jq -r .head.sha | head -c 6)
          else
              echo "else"
              sha=$(echo $SHA | head -c 6)
          fi
          echo "sha=$sha" >> $GITHUB_OUTPUT
        env:
          SHA: ${{ github.event.after }} # this isn't present for pr opened events
          ACTION: ${{github.event.action}}
          PR_NUM: ${{github.event.number}}
      
      - name: Set short SHA
        run: echo $SHA
        env:
          SHA: ${{ steps.short-sha.outputs.sha }}

      - name: Cache ARM Toolchain
        id: cache-arm
        uses: actions/cache@v2
        with:
          path: ~/arm-none-eabi
          key: ${{ runner.os }}-arm-toolchain-${{ steps.month-number.outputs.month }}
          restore-keys: |
            ${{ runner.os }}-arm-toolchain-

      - name: Install ARM Toolchain
        if: steps.cache-arm.outputs.cache-hit != 'true'
        uses: fiam/arm-none-eabi-gcc@v1
        with:
          release: '10-2020-q4'

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
  
      - name: PIP Installer
        uses: BSFishy/pip-action@v1
        with:
          packages: pros-cli
  
      - name: Testing PROS Install 
        run: pros --version

      - name: Checkout
        uses: actions/checkout@v2.3.4
      
      - name: Get version number
        id: version
        run: |
          version=$(awk -F'=' '/^VERSION:=/{print $2}' Makefile)
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Get Template Postfix
        id: template-postfix
        run: | 
          echo postfix="$VER+$SHA" >> "$GITHUB_OUTPUT"
        env:
          SHA: ${{ steps.short-sha.outputs.sha }}
          VER: ${{ steps.version.outputs.version }}

      - name: Get Template Name
        id: template-name
        run: | 
          echo name=$TEMPLATE_NAME@$POSTFIX >> "$GITHUB_OUTPUT"
        env:
          POSTFIX: ${{ steps.template-postfix.outputs.postfix }}
          TEMPLATE_NAME: ${{ github.event.repository.name }}
      
      - name: Update version in Makefile
        run: sed -i "s/^VERSION:=.*\$/VERSION:=$POSTFIX/" Makefile
        env:
          POSTFIX: ${{ steps.template-postfix.outputs.postfix }}

      - name: Build PROS Project  
        run: make quick -j
        env:
            ROOT: .
            FWDIR: ./firmware
            BINDIR: ./bin
            SRCDIR: ./src
            INCDIR: ./include
            WARNFLAGS: 
            EXTRA_CFLAGS: -I/opt/homebrew/Cellar/googletest/1.14.0/include -Isrc/pxl/yaml-cpp/include -Lsrc/pxl/yaml-cpp/lib -lyaml-cpp
            EXTRA_CXXFLAGS: -I/opt/homebrew/Cellar/googletest/1.14.0/include -Isrc/pxl/yaml-cpp/include -Lsrc/pxl/yaml-cpp/lib -lyaml-cpp
            USE_PACKAGE: 1
            EXCLUDE_COLD_LIBRARIES: 
            IS_LIBRARY: 1
            LIBNAME: Pixel
            VERSION: 0.1.0
            EXCLUDE_SRC_FROM_LIB: $(foreach file, $(SRCDIR)/main,$(foreach cext,$(CEXTS),$(file).$(cext)) $(foreach cxxext,$(CXXEXTS),$(file).$(cxxext)))
            TEMPLATE_FILES: $(INCDIR)/**/*.h $(INCDIR)/**/*.hpp

      - name: Create Pixel template
        run: pros make template

      - name: Create template folder
        run: mkdir template

      - name: Unzip Template
        uses: montudor/action-zip@v1.0.0
        with:
          args: unzip "${{steps.template-name.outputs.name}}.zip" -d template
  
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.template-name.outputs.name }}
          path: 'template/*'
          retention-days: 89